#ifndef _amici_TPL_MODELNAME_h
#define _amici_TPL_MODELNAME_h
#include <cmath>
#include <memory>

#include "amici/model_ode.h"
#include "amici/solver_cvodes.h"

#include "sundials/sundials_types.h"

namespace amici {

class Solver;

namespace model_MEMMAL_v1 {

extern std::array<const char*, 0> parameterNames;
extern std::array<const char*, 4790> fixedParameterNames;
extern std::array<const char*, 1632> stateNames;
extern std::array<const char*, 3> observableNames;
extern std::array<const char*, 4228> expressionNames;
extern std::array<const char*, 0> parameterIds;
extern std::array<const char*, 4790> fixedParameterIds;
extern std::array<const char*, 1632> stateIds;
extern std::array<const char*, 3> observableIds;
extern std::array<const char*, 4228> expressionIds;

extern void Jy_MEMMAL_v1(realtype *nllh, const int iy, const realtype *p,
                             const realtype *k, const realtype *y,
                             const realtype *sigmay, const realtype *my);
extern void dJydsigmay_MEMMAL_v1(realtype *dJydsigmay, const int iy,
                                     const realtype *p, const realtype *k,
                                     const realtype *y, const realtype *sigmay,
                                     const realtype *my);
extern void dJydy_MEMMAL_v1(realtype *dJydy, const int iy, const realtype *p, const realtype *k, const realtype *y, const realtype *sigmay, const realtype *my);
extern void dJydy_colptrs_MEMMAL_v1(SUNMatrixWrapper &colptrs, int index);
extern void dJydy_rowvals_MEMMAL_v1(SUNMatrixWrapper &rowvals, int index);

extern void root_MEMMAL_v1(realtype *root, const realtype t,
                               const realtype *x, const realtype *p,
                               const realtype *k, const realtype *h);

extern void dwdp_MEMMAL_v1(realtype *dwdp, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *w, const realtype *tcl, const realtype *dtcldp);
extern void dwdp_colptrs_MEMMAL_v1(SUNMatrixWrapper &colptrs);
extern void dwdp_rowvals_MEMMAL_v1(SUNMatrixWrapper &rowvals);
extern void dwdx_MEMMAL_v1(realtype *dwdx, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *w, const realtype *tcl);
extern void dwdx_colptrs_MEMMAL_v1(SUNMatrixWrapper &colptrs);
extern void dwdx_rowvals_MEMMAL_v1(SUNMatrixWrapper &rowvals);
extern void dwdw_MEMMAL_v1(realtype *dwdw, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *w, const realtype *tcl);
extern void dwdw_colptrs_MEMMAL_v1(SUNMatrixWrapper &colptrs);
extern void dwdw_rowvals_MEMMAL_v1(SUNMatrixWrapper &rowvals);
extern void dxdotdw_MEMMAL_v1(realtype *dxdotdw, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *w);
extern void dxdotdw_colptrs_MEMMAL_v1(SUNMatrixWrapper &colptrs);
extern void dxdotdw_rowvals_MEMMAL_v1(SUNMatrixWrapper &rowvals);
extern void dxdotdp_explicit_MEMMAL_v1(realtype *dxdotdp_explicit, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *w);
extern void dxdotdp_explicit_colptrs_MEMMAL_v1(SUNMatrixWrapper &colptrs);
extern void dxdotdp_explicit_rowvals_MEMMAL_v1(SUNMatrixWrapper &rowvals);
extern void dxdotdx_explicit_MEMMAL_v1(realtype *dxdotdx_explicit, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *w);
extern void dxdotdx_explicit_colptrs_MEMMAL_v1(SUNMatrixWrapper &colptrs);
extern void dxdotdx_explicit_rowvals_MEMMAL_v1(SUNMatrixWrapper &rowvals);

extern void dydx_MEMMAL_v1(realtype *dydx, const realtype t,
                               const realtype *x, const realtype *p,
                               const realtype *k, const realtype *h,
                               const realtype *w, const realtype *dwdx);
extern void dydp_MEMMAL_v1(realtype *dydp, const realtype t,
                               const realtype *x, const realtype *p,
                               const realtype *k, const realtype *h,
                               const int ip, const realtype *w,
                               const realtype *dwp);
extern void dsigmaydp_MEMMAL_v1(realtype *dsigmaydp, const realtype t,
                                    const realtype *p, const realtype *k,
                                    const int ip);
extern void sigmay_MEMMAL_v1(realtype *sigmay, const realtype t,
                                 const realtype *p, const realtype *k);
extern void w_MEMMAL_v1(realtype *w, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *tcl);
extern void x0_MEMMAL_v1(realtype *x0, const realtype t, const realtype *p,
                             const realtype *k);
extern void x0_fixedParameters_MEMMAL_v1(realtype *x0, const realtype t,
                                             const realtype *p,
                                             const realtype *k);
extern void sx0_MEMMAL_v1(realtype *sx0, const realtype t,
                              const realtype *x0, const realtype *p,
                              const realtype *k, const int ip);
extern void sx0_fixedParameters_MEMMAL_v1(realtype *sx0, const realtype t,
                                              const realtype *x0,
                                              const realtype *p,
                                              const realtype *k, const int ip);
extern void xdot_MEMMAL_v1(realtype *xdot, const realtype t,
                               const realtype *x, const realtype *p,
                               const realtype *k, const realtype *h,
                               const realtype *w);
extern void y_MEMMAL_v1(realtype *y, const realtype t, const realtype *x,
                            const realtype *p, const realtype *k,
                            const realtype *h, const realtype *w);
extern void stau_MEMMAL_v1(realtype *stau, const realtype t,
                               const realtype *x, const realtype *p,
                               const realtype *k, const realtype *h,
                               const realtype *sx, const int ip, const int ie);
extern void deltasx_MEMMAL_v1(realtype *deltasx, const realtype t,
                                  const realtype *x, const realtype *p,
                                  const realtype *k, const realtype *h,
                                  const realtype *w, const int ip,
                                  const int ie, const realtype *xdot,
                                  const realtype *xdot_old, const realtype *sx,
                                  const realtype *stau);

extern void x_solver_MEMMAL_v1(realtype *x_solver, const realtype *x_rdata);
extern void total_cl_MEMMAL_v1(realtype *total_cl, const realtype *x_rdata);

/**
 * @brief AMICI-generated model subclass.
 */
class Model_MEMMAL_v1 : public amici::Model_ODE {
  public:
    /**
     * @brief Default constructor.
     */
    Model_MEMMAL_v1()
        : amici::Model_ODE(
              1632,                                // nx_rdata
              1632,                            // nxtrue_rdata
              1632,                               // nx_solver
              1632,                           // nxtrue_solver
              0,                        // nx_solver_reinit
              3,                                      // ny
              3,                                  // nytrue
              0,                                      // nz
              0,                                  // nztrue
              0,                                  // nevent
              1,                              // nobjective
              4228,                                      // nw
              5367,                                   // ndwdx
              0,                                   // ndwdp
              0,                                   // ndwdw
              8730,                                // ndxdotdw
              std::vector<int>{1,1,1},                                  // ndjydy
              0,                                           // nnz
              1632,                                     // ubw
              1632,                                     // lbw
              amici::SecondOrderMode::none,                                  // o2mode
              std::vector<realtype>{},       // dynamic parameters
              std::vector<realtype>{0.0042005000000000002, 0.040000000000000001, 5.0, 4.8641449999999997, 2.2199999999999999e-6, 140.7475, 100.0, 5.0043559999999996, 0.022519600000000001, 100.0, 0.1563861, 100.0, 0.0045350800000000004, 100.0, 0.021778229999999999, 100.0, 70.148700000000005, 4.3917710000000003, 4.3917710000000003, 4.3917710000000003, 26.925899999999999, 0.0118, 10.0, 200.0, 100.0, 26.925899999999999, 0.0118, 10.0, 200.0, 100.0, 26.925899999999999, 0.0118, 10.0, 200.0, 100.0, 0.12740000000000001, 10.0, 200.0, 0.12740000000000001, 10.0, 200.0, 13.1753, 11.4186, 9.2226999999999997, 10.5402, 0.032939999999999997, 10.0, 200.0, 70.268299999999996, 0.087800000000000003, 10.0, 200.0, 9.6618999999999993, 4.3917999999999999, 8.7835000000000001, 5.2701000000000002, 0.008744, 0.53120000000000001, 0.0, 100.0, 0.0067011839999999998, 100.0, 0.0069648130000000003, 100.0, 0.045607889999999998, 100.0, 0.031796860000000003, 100.0, 0.0051876459999999998, 100.0, 0.003010974, 100.0, 0.025867569999999999, 100.0, 0.02314422, 100.0, 0.0042370840000000003, 100.0, 0.1414059, 100.0, 0.34443299999999999, 100.0, 0.042935260000000003, 100.0, 0.028910330000000001, 100.0, 0.10319490000000001, 100.0, 0.49017509999999997, 100.0, 0.32753860000000001, 100.0, 0.070331829999999998, 100.0, 0.1085227, 100.0, 0.0080245290000000007, 100.0, 0.024769860000000001, 100.0, 0.1701828, 100.0, 0.56585969999999997, 100.0, 0.02889506, 100.0, 0.49676110000000001, 100.0, 0.071223880000000003, 100.0, 0.071223880000000003, 100.0, 0.5191829, 100.0, 0.05307133, 100.0, 0.0060551010000000002, 100.0, 0.017639780000000001, 100.0, 0.033198239999999997, 100.0, 0.014284989999999999, 100.0, 0.071223880000000003, 100.0, 0.033195889999999999, 100.0, 0.033195889999999999, 100.0, 0.071223880000000003, 100.0, 0.0039209919999999999, 100.0, 0.051769959999999997, 100.0, 0.61848150000000002, 100.0, 0.030205659999999999, 100.0, 0.031790770000000003, 100.0, 0.01463618, 100.0, 0.01108511, 100.0, 0.002549623, 100.0, 0.002549623, 100.0, 0.097454499999999999, 100.0, 0.0054411900000000003, 100.0, 4.9200000000000003e-5, 100.0, 0.027289230000000001, 100.0, 0.01395976, 100.0, 0.29534450000000001, 100.0, 0.29534450000000001, 100.0, 0.036084339999999999, 100.0, 0.20779220000000001, 100.0, 1.0127839999999999, 100.0, 0.0022179919999999998, 100.0, 0.06589921, 100.0, 0.038718549999999997, 100.0, 0.23846829999999999, 100.0, 0.40761199999999997, 100.0, 0.00081118300000000004, 100.0, 0.14551559999999999, 100.0, 0.007642617, 100.0, 0.020378690000000001, 100.0, 0.12644079999999999, 100.0, 0.00068451299999999998, 100.0, 0.39416790000000002, 100.0, 0.16488269999999999, 100.0, 39.405059999999999, 100.0, 5.20533, 100.0, 0.000657728, 100.0, 0.73780950000000001, 100.0, 0.18091699999999999, 100.0, 0.122997, 100.0, 0.016363249999999999, 100.0, 0.42393690000000001, 100.0, 0.3710793, 100.0, 0.0014185980000000001, 100.0, 0.01530346, 100.0, 0.0077134430000000004, 100.0, 0.0068844869999999999, 100.0, 0.0068844869999999999, 100.0, 0.088773290000000005, 100.0, 0.074966900000000003, 100.0, 0.6472173, 100.0, 0.087711700000000004, 100.0, 0.039339510000000001, 100.0, 0.12852949999999999, 100.0, 0.37044379999999999, 100.0, 0.1502261, 100.0, 0.055730599999999998, 100.0, 0.061250230000000003, 100.0, 0.0094272009999999996, 100.0, 0.012365259999999999, 100.0, 0.0015187569999999999, 100.0, 0.0018358630000000001, 100.0, 0.0018358630000000001, 100.0, 0.071223880000000003, 100.0, 0.071223880000000003, 100.0, 0.1190007, 100.0, 0.0057998640000000001, 100.0, 0.113843, 100.0, 0.071223880000000003, 100.0, 0.071223880000000003, 100.0, 0.01450361, 100.0, 0.075747839999999997, 100.0, 0.047510869999999997, 100.0, 0.20233889999999999, 100.0, 0.01397178, 100.0, 0.071223880000000003, 100.0, 0.0, 0.0, 0.0, 7.7000000000000001e-5, 5.5400000000000003e-6, 5.5999999999999997e-6, 0.0, 0.00026018999999999999, 6.0299999999999999e-6, 1.2099999999999999e-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.6900000000000001e-6, 0.00019254100000000001, 2.34e-6, 2.8600000000000001e-5, 2.3300000000000001e-6, 5.3200000000000005e-7, 2.8600000000000001e-5, 2.5000000000000002e-6, 2.83e-6, 0.000121963, 2.4700000000000001e-6, 1.3200000000000001e-6, 2.0999999999999998e-6, 6.0599999999999996e-6, 2.34e-6, 9.2499999999999995e-6, 2.7500000000000001e-5, 0.00012836100000000001, 6.4200000000000002e-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5099999999999999e-5, 1.04e-5, 1.2300000000000001e-5, 0.0, 0.0, 6.55e-6, 6.4200000000000002e-5, 6.55e-6, 6.55e-6, 2.87e-5, 5.8199999999999998e-5, 9.6299999999999996e-5, 6.5100000000000004e-6, 1.1199999999999999e-5, 6.2199999999999997e-6, 4.8099999999999997e-6, 4.3900000000000003e-6, 8.9900000000000003e-6, 6.7800000000000003e-6, 6.8600000000000004e-6, 2.4899999999999999e-6, 9.6199999999999994e-6, 9.6199999999999994e-6, 2.2199999999999999e-6, 0.00025672100000000001, 3.23e-6, 0.00025672100000000001, 0.00025672100000000001, 8.8900000000000006e-5, 0.00038508200000000002, 1.34e-5, 1.4500000000000001e-6, 5.75e-6, 7.0099999999999998e-6, 7.2400000000000001e-6, 5.1599999999999997e-6, 5.8499999999999999e-6, 3.6799999999999999e-6, 5.3499999999999996e-6, 3.18e-6, 5.9299999999999998e-7, 3.4300000000000002e-6, 4.1500000000000001e-6, 8.3999999999999992e-6, 2.55e-5, 6.4099999999999996e-6, 3.0300000000000001e-5, 5.0000000000000004e-6, 1.6700000000000001e-6, 0.001, 0.10000000000000001, 0.00021065799999999999, 1.6700000000000001e-6, 1.6700000000000001e-6, 0.0, 1.39e-6, 0.00050000000000000001, 0.0027777779999999998, 4.0, 1000.0, 3.8899999999999998e-8, 0.00055555600000000002, 3.89e-7, 0.0, 0.0, 1.3899999999999999e-7, 2.7800000000000001e-8, 0.00027777800000000001, 0.0, 0.000194444, 2.7777780000000001, 20.0, 2.0, 0.013888889999999999, 4.0, 200.0, 0.0020833330000000001, 1.25, 20.0, 2.0, 0.0020833330000000001, 122.2128, 122.2128, 211.0104, 211.0104, 12.88008, 12.88008, 1213.3800000000001, 1213.3800000000001, 48.585599999999999, 48.585599999999999, 111.38039999999999, 111.38039999999999, 15.28632, 15.28632, 291.99239999999998, 291.99239999999998, 363.34800000000001, 363.34800000000001, 478.62, 478.62, 289.35719999999998, 289.35719999999998, 440.892, 440.892, 594.79200000000003, 594.79200000000003, 357.24599999999998, 357.24599999999998, 490.64400000000001, 490.64400000000001, 1026.1800000000001, 1026.1800000000001, 380.69999999999999, 380.69999999999999, 238.6764, 238.6764, 399.31200000000001, 399.31200000000001, 152.76240000000001, 152.76240000000001, 0.0, 0.0, 0.0, 0.0, 5.0000000000000002e-5, 1.0000000000000001e-5, 1.0000000000000001e-5, 9.9999999999999995e-7, 0.0050000000000000001, 0.0, 5000.0, 5.0, 20.0, 0.0, 2.3599999999999999e-6, 0.0023611109999999999, 0.01038889, 10.0, 0.94444439999999996, 10.0, 4.7200000000000002e-5, 0.0047222219999999999, 10.0, 0.94444439999999996, 10.0, 1.1799999999999999e-6, 0.0023611109999999999, 0.00028333299999999998, 0.000188889, 0.0, 0.018888889999999998, 500.0, 0.3541667, 500.0, 9.4399999999999994e-6, 0.0051944440000000003, 0.0, 8.2600000000000005e-6, 150.0, 0.00047222200000000001, 2.3611110000000002, 10.0, 2.3600000000000001e-5, 0.094444440000000004, 10.0, 0.47222219999999998, 10.0, 7.08e-6, 0.00070833300000000001, 0.0, 9.4399999999999994e-6, 200.0, 0.00047222200000000001, 1.4166669999999999, 200.0, 10.0, 0.0066111110000000002, 50.0, 10.0, 0.0094444439999999998, 10.0, 9.4399999999999994e-6, 0.00047222200000000001, 0.0, 0.51944440000000003, 50.0, 40.0, 2.3600000000000001e-5, 0.0, 0.3777778, 1.0, 0.01, 10.0, 0.023611110000000001, 25.0, 10.0, 0.00070833300000000001, 0.00035416700000000001, 0.0, 9.4399999999999994e-6, 200.0, 0.00047222200000000001, 1.1805559999999999, 110.0, 200.0, 2.3600000000000001e-5, 0.0087361109999999995, 50.0, 10.0, 0.0094444439999999998, 10.0, 7.08e-6, 0.00059027799999999996, 0.47222219999999998, 50.0, 0.047222220000000002, 50.0, 2.3611110000000002, 10.0, 10.0, 4.7200000000000002e-5, 0.037777779999999997, 1.0, 0.59027779999999996, 1.0, 0.00094444400000000001, 0.0, 0.00047222200000000001, 0.0, 0.47222219999999998, 1.0, 0.01, 10.0, 0.018888889999999998, 20.0, 10.0, 0.00070833300000000001, 0.00035416700000000001, 0.0, 1.1800000000000001e-5, 50.0, 0.00047222200000000001, 0.02833333, 0.5, 20.0, 10.0, 2.3600000000000001e-5, 0.0099166670000000005, 50.0, 10.0, 0.01841667, 10.0, 5.6699999999999999e-6, 0.00094444400000000001, 0.0, 0.037777779999999997, 10.0, 0.3305556, 10.0, 0.00066111100000000003, 0.000236111, 0.0, 0.47222219999999998, 1.0, 0.01, 10.0, 0.023611110000000001, 11.0, 10.0, 0.00094444400000000001, 0.00047222200000000001, 0.0, 0.0056666670000000002, 75.0, 10.0, 0.47222219999999998, 10.0, 0.00047222200000000001, 0.00094444400000000001, 0.018888889999999998, 50.0, 50.0, 0.047222220000000002, 50.0, 2.3600000000000001e-5, 0.0, 0.0, 0.00028333299999999998, 1.42e-6, 0.000236111, 1.8899999999999999e-6, 0.00047222200000000001, 1.42e-6, 0.00059027799999999996, 1.13e-6, 0.00094444400000000001, 0.00028973099999999999, 0.00126483, 0.001, 9.9999999999999995e-7, 0.0031620749999999999, 0.001, 0.0031620749999999999, 0.001, 1.0, 0.0031620749999999999, 0.001, 0.00031620800000000001, 0.001, 0.001, 3.1599999999999998e-6, 0.001, 1.0, 9.4900000000000006e-6, 0.001, 1.0, 0.0063241499999999997, 0.001, 0.10000000000000001, 3.1600000000000002e-5, 0.01, 1.0, 3.1599999999999998e-6, 0.001, 0.0001, 0.0031620749999999999, 0.001, 0.00031620800000000001, 0.001, 1.0, 0.01, 0.01, 0.0031620749999999999, 0.001, 316.20749999999998, 10.0, 0.0031620749999999999, 0.001, 316.20749999999998, 10.0, 0.0031620749999999999, 0.001, 0.0031620749999999999, 0.001, 1.0, 0.0063241499999999997, 1.0, 0.10000000000000001, 0.0063241499999999997, 1.0, 0.10000000000000001, 0.01, 0.01, 0.0015810380000000001, 0.001, 1.0, 0.000158104, 0.001, 1.5800000000000001e-5, 0.001, 0.0001, 0.01, 0.01, 0.0063241499999999997, 0.001, 0.022134529999999999, 0.001, 0.0031620749999999999, 0.001, 0.0031620749999999999, 0.001, 0.0031620749999999999, 0.001, 1.5799999999999999e-8, 0.001, 1.0, 0.0031620749999999999, 0.001, 0.01, 0.01, 0.01, 0.001, 0.10000000000000001, 1.0000000000000001e-9, 0.001, 0.001, 0.01, 0.001, 0.01, 0.01, 0.001, 0.02, 0.01, 0.01, 0.01, 0.001, 0.001, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.001, 0.01, 0.01, 0.01, 0.001, 0.001, 0.01, 0.01, 0.01, 0.01, 0.001, 0.01, 0.01, 0.01, 0.001, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.001, 0.01, 0.01, 0.01, 0.001, 0.001, 0.01, 0.01, 0.01, 0.01, 0.001, 0.01, 0.01, 0.01, 0.001, 0.01, 0.01, 0.01, 0.01, 0.01, 0.001, 0.02, 0.01, 0.01, 0.001, 0.10000000000000001, 0.001, 0.10000000000000001, 0.001, 0.10000000000000001, 0.050000000000000003, 0.0016000000000000001, 0.01, 0.01, 0.050000000000000003, 0.0032000000000000002, 0.01, 0.01, 0.050000000000000003, 0.050000000000000003, 0.01, 0.0001, 2.0, 0.001, 0.001, 2.0000000000000002e-5, 0.01, 0.001, 0.0040000000000000001, 0.001, 0.001, 0.01, 0.01, 0.0, 0.01, 0.0, 0.10000000000000001, 1.0, 0.10000000000000001, 1.0, 0.10000000000000001, 1.0, 0.001, 1.0, 0.001, 1.0, 0.001, 1.0, 0.001, 1.0, 0.001, 1.0, 0.001, 1.0, 0.001, 1.0, 0.001, 1.0, 0.001, 1.0, 0.002, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.002, 0.001, 0.002, 0.001, 0.001, 1.0, 0.10000000000000001, 0.0016000000000000001, 0.001, 1.0, 0.002, 2.0000000000000002e-5, 0.00034699999999999998, 3.1199999999999999e-5, 0.00034699999999999998, 0.0030999999999999999, 9.7999999999999997e-5, 0.0030999999999999999, 5.5799999999999999ee-5, 2.0, 0.00016667, 0.00016667, 2.0, 0.00016667, 7.9300000000000003e-5, 2.0, 0.00016667, 0.00016667, 2.0, 0.00016667, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.00085205000000000003, 0.00085205000000000003, 0.00083710999999999996, 0.00083710999999999996, 0.00085205000000000003, 0.00085205000000000003, 0.00085205000000000003, 0.00085205000000000003, 0.0014, 0.0014, 0.00085205000000000003, 0.0014, 0.0014, 0.0014, 0.0014, 0.00085205000000000003, 0.0014, 0.0014, 0.0014, 0.0014, 0.0014, 0.0014, 0.0014, 0.0014, 0.0014, 7.7000000000000004e-7, 3.1999999999999999e-5, 7.7000000000000004e-7, 3.1999999999999999e-5, 0.0089999999999999993, 0.01, 0.01, 0.01, 0.0080000000000000002, 0.0080000000000000002, 0.010999999999999999, 0.010999999999999999, 0.0070000000000000001, 0.0080000000000000002, 0.0080000000000000002, 0.0089999999999999993, 0.0089999999999999993, 0.01, 0.010999999999999999, 0.010999999999999999, 0.0089999999999999993, 0.012, 0.012, 0.002, 0.002, 0.001, 0.001, 0.0080000000000000002, 0.0080000000000000002, 0.0050000000000000001, 0.0070000000000000001, 0.0050000000000000001, 0.0070000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 0.0089999999999999993, 0.01, 0.01, 0.01, 0.0080000000000000002, 0.0080000000000000002, 0.010999999999999999, 0.010999999999999999, 0.0070000000000000001, 0.0080000000000000002, 0.0080000000000000002, 0.0089999999999999993, 0.0089999999999999993, 0.01, 0.010999999999999999, 0.010999999999999999, 0.0089999999999999993, 0.012, 0.012, 0.002, 0.002, 0.001, 0.001, 0.0080000000000000002, 0.0080000000000000002, 0.0050000000000000001, 0.0070000000000000001, 0.0050000000000000001, 0.0070000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 0.0040000000000000001, 0.0040000000000000001, 0.0040000000000000001, 0.0040000000000000001, 0.0030000000000000001, 0.0030000000000000001, 0.0030000000000000001, 0.0030000000000000001, 0.0030000000000000001, 0.0030000000000000001, 0.0030000000000000001, 0.002, 0.002, 0.0030000000000000001, 0.0030000000000000001, 0.0030000000000000001, 0.002, 0.002, 0.002, 0.0040000000000000001, 0.0040000000000000001, 0.0050000000000000001, 0.0050000000000000001, 0.002, 0.0060000000000000001, 0.0015, 0.0035000000000000001, 0.0015, 0.0035000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.51000000000000001, 0.0040000000000000001, 0.002, 0.002, 0.002, 0.01, 0.01, 0.0040000000000000001, 0.0040000000000000001, 0.012, 0.01, 0.01, 0.012, 0.012, 0.0060000000000000001, 0.0040000000000000001, 0.0040000000000000001, 0.012, 0.0060000000000000001, 0.0060000000000000001, 0.0060000000000000001, 0.0060000000000000001, 0.0060000000000000001, 0.0060000000000000001, 0.014, 0.016, 0.010500000000000001, 0.014500000000000001, 0.010500000000000001, 0.014500000000000001, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.0040000000000000001, 0.002, 0.002, 0.002, 0.01, 0.01, 0.0040000000000000001, 0.0040000000000000001, 0.012, 0.01, 0.01, 0.012, 0.012, 0.0060000000000000001, 0.0040000000000000001, 0.0040000000000000001, 0.012, 0.0060000000000000001, 0.0060000000000000001, 0.0060000000000000001, 0.0060000000000000001, 0.0060000000000000001, 0.0060000000000000001, 0.014, 0.016, 0.010500000000000001, 0.014500000000000001, 0.010500000000000001, 0.014500000000000001, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.070000000000000007, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.0050000000000000001, 0.0050000000000000001, 0.0050000000000000001, 0.0050000000000000001, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.050000000000000003, 0.050000000000000003, 0.050000000000000003, 0.050000000000000003, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 5.0, 5.0, 5.0, 5.0, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0080000000000000002, 0.01, 0.0080000000000000002, 0.01, 0.0080000000000000002, 0.01, 0.0080000000000000002, 0.01, 0.0080000000000000002, 0.01, 0.0080000000000000002, 0.01, 0.0080000000000000002, 0.01, 0.0080000000000000002, 0.01, 0.001, 0.01, 0.001, 0.01, 0.10000000000000001, 1.0, 0.10000000000000001, 1.0, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 1.0, 1.0, 0.10000000000000001, 1.0, 1.0, 0.10000000000000001, 1.0, 10.0, 0.10000000000000001, 1.0, 10.0, 0.10000000000000001, 1.0, 5.0, 0.10000000000000001, 1.0, 5.0, 0.10000000000000001, 0.01, 0.001, 1.0, 1.0, 0.001, 1.0, 1.0, 0.002, 0.20000000000000001, 1.0, 0.001, 0.10000000000000001, 0.01, 0.012999999999999999, 0.001, 0.10000000000000001, 1.0, 0.01, 0.001, 0.10000000000000001, 1.0, 0.01, 0.001, 0.10000000000000001, 1.0, 0.02, 2.0, 10.0, 0.0, 0.10000000000000001, 1.0, 1.0, 0.001, 0.10000000000000001, 1.0, 0.001, 0.10000000000000001, 1.0, 0.001, 0.10000000000000001, 1.0, 1.0, 0.010999999999999999, 0.0, 0.001, 0.10000000000000001, 1.0, 0.90000000000000002, 0.010999999999999999, 0.001, 0.10000000000000001, 1.0, 1.0, 0.001, 0.10000000000000001, 1.0, 0.001, 0.10000000000000001, 1.0, 0.001, 0.01, 1.0, 100.0, 0.001, 0.10000000000000001, 0.001, 0.10000000000000001, 1.0, 0.001, 0.0, 0.10000000000000001, 0.01, 1.0, 10.0, 0.001, 0.10000000000000001, 0.001, 0.10000000000000001, 0.001, 0.0001, 0.050000000000000003, 5.0, 10.0, 0.01, 0.050000000000000003, 5.0, 10.0, 0.001, 1.0, 0.0001, 0.001, 0.10000000000000001, 1.0, 0.01, 60.0, 4.0, 200.0, 0.01, 0.012, 0.017999999999999999, 0.01, 1.0, 1.0, 0.0001, 0.10000000000000001, 0.10000000000000001, 0.10000000000000001, 0.01, 0.001, 1.0, 4.0, 0.10000000000000001, 0.001, 0.0001, 0.10000000000000001, 1.0, 10.0, 0.01, 0.01, 1.0, 10.0, 0.029999999999999999, 0.0050000000000000001, 0.10000000000000001, 1.0, 0.001, 0.001, 0.10000000000000001, 1.0, 0.001, 0.001, 0.0001, 0.001, 0.001, 0.0001, 0.001, 0.01, 0.48299999999999998, 0.001, 0.10000000000000001, 0.01, 0.050000000000000003, 0.01, 0.10000000000000001, 1.0000000000000001e-5, 0.10000000000000001, 0.01, 5.0000000000000004e-6, 0.01, 0.00040000000000000002, 0.01, 0.001, 0.0001, 0.001, 0.0001, 0.0, 0.0, 0.0, 0.0, 0.001, 0.10000000000000001, 1.0, 0.0050000000000000001, 0.001, 0.10000000000000001, 1.0, 0.001, 0.10000000000000001, 1.0, 0.001, 2.6900000000000001e-6, 0.002688368, 0.00019254100000000001, 2.6900000000000001e-6, 0.00023397899999999999, 2.8600000000000001e-5, 2.34e-6, 0.00023279900000000001, 2.3300000000000001e-6, 5.3199999999999999e-5, 2.34e-6, 2.8600000000000001e-5, 2.5000000000000002e-6, 2.5000000000000002e-6, 2.83e-6, 0.00028327300000000001, 0.000121963, 2.83e-6, 0.000247132, 2.4700000000000001e-6, 0.000121963, 0.000121963, 2.4700000000000001e-6, 0.000121963, 2.4700000000000001e-6, 0.000121963, 1.3200000000000001e-6, 2.0999999999999998e-6, 1.3200000000000001e-6, 6.0599999999999996e-6, 6.0599999999999996e-6, 6.0599999999999996e-6, 6.0599999999999996e-6, 2.0999999999999998e-6, 2.8600000000000001e-5, 2.8600000000000001e-5, 2.3300000000000001e-6, 0.000121963, 0.000121963, 0.00012836100000000001, 6.4200000000000002e-5, 0.000121963, 6.4200000000000002e-5, 0.00064180300000000003, 9.2499999999999995e-6, 9.2499999999999999e-5, 9.2499999999999995e-6, 1.5099999999999999e-5, 1.04e-5, 0.0, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.04e-5, 1.2300000000000001e-5, 1.04e-5, 1.2300000000000001e-5, 0.0, 6.55e-6, 6.55e-6, 6.55e-6, 2.87e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 0.0, 6.55e-6, 6.4200000000000002e-5, 6.55e-6, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.2300000000000001e-5, 1.2300000000000001e-5, 1.04e-5, 0.0, 1.5099999999999999e-5, 1.2300000000000001e-5, 0.0, 6.55e-6, 6.4200000000000002e-5, 6.55e-6, 6.55e-6, 2.87e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.2300000000000001e-5, 0.0, 6.55e-6, 6.4200000000000002e-5, 6.55e-6, 6.55e-6, 2.87e-5, 1.5099999999999999e-5, 1.04e-5, 3.4300000000000002e-6, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.2300000000000001e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.2300000000000001e-5, 1.04e-5, 0.0, 1.5099999999999999e-5, 1.2300000000000001e-5, 0.0, 0.0, 6.55e-6, 6.55e-6, 6.4200000000000002e-5, 6.4200000000000002e-5, 6.55e-6, 6.55e-6, 6.55e-6, 2.87e-5, 6.55e-6, 2.87e-5, 5.8199999999999998e-5, 5.8199999999999998e-5, 5.8199999999999998e-5, 5.8199999999999998e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 9.6299999999999996e-5, 0.00021301, 0.00021301, 0.00083710999999999996, 0.00083710999999999996, 0.00021301, 0.00021301, 0.00021301, 0.00021301, 8.7100000000000003e-5, 8.7100000000000003e-5, 0.00021301, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 0.00021301, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 0.00021301, 0.00021301, 0.00083710999999999996, 0.00083710999999999996, 0.00021301, 0.00021301, 0.00021301, 0.00021301, 8.7100000000000003e-5, 8.7100000000000003e-5, 0.00021301, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 0.00021301, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.2300000000000001e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.2300000000000001e-5, 1.1199999999999999e-5, 1.1199999999999999e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.1199999999999999e-5, 1.1199999999999999e-5, 1.1199999999999999e-5, 1.1199999999999999e-5, 6.4200000000000002e-5, 6.4200000000000002e-5, 1.1199999999999999e-5, 1.1199999999999999e-5, 5.8199999999999998e-5, 5.8199999999999998e-5, 5.8199999999999998e-5, 5.8199999999999998e-5, 0.00021301, 0.00021301, 0.00083710999999999996, 0.00083710999999999996, 0.00021301, 0.00021301, 0.00021301, 0.00021301, 8.7100000000000003e-5, 8.7100000000000003e-5, 0.00021301, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 0.00021301, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.2300000000000001e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.2300000000000001e-5, 1.04e-5, 6.2199999999999997e-6, 1.5099999999999999e-5, 1.2300000000000001e-5, 6.2199999999999997e-6, 6.2199999999999997e-6, 6.55e-6, 6.55e-6, 6.4200000000000002e-5, 6.4200000000000002e-5, 6.55e-6, 6.55e-6, 5.8199999999999998e-5, 5.8199999999999998e-5, 5.8199999999999998e-5, 5.8199999999999998e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.2300000000000001e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.2300000000000001e-5, 1.04e-5, 4.8099999999999997e-6, 1.5099999999999999e-5, 1.2300000000000001e-5, 4.8099999999999997e-6, 4.8099999999999997e-6, 6.55e-6, 6.55e-6, 6.4200000000000002e-5, 6.4200000000000002e-5, 6.55e-6, 6.55e-6, 5.8199999999999998e-5, 5.8199999999999998e-5, 5.8199999999999998e-5, 5.8199999999999998e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.2300000000000001e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.2300000000000001e-5, 1.04e-5, 8.9900000000000003e-6, 1.5099999999999999e-5, 1.2300000000000001e-5, 8.9900000000000003e-6, 8.9900000000000003e-6, 8.9900000000000003e-6, 8.9900000000000003e-6, 6.4200000000000002e-5, 6.4200000000000002e-5, 8.9900000000000003e-6, 8.9900000000000003e-6, 5.8199999999999998e-5, 5.8199999999999998e-5, 5.8199999999999998e-5, 5.8199999999999998e-5, 0.00021301, 0.00021301, 0.00083710999999999996, 0.00083710999999999996, 0.00021301, 0.00021301, 0.00021301, 0.00021301, 8.7100000000000003e-5, 8.7100000000000003e-5, 0.00021301, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 0.00021301, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 8.7100000000000003e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.2300000000000001e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.2300000000000001e-5, 1.1199999999999999e-5, 1.1199999999999999e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.1199999999999999e-5, 1.1199999999999999e-5, 1.1199999999999999e-5, 1.1199999999999999e-5, 6.4200000000000002e-5, 6.4200000000000002e-5, 1.1199999999999999e-5, 1.1199999999999999e-5, 5.8199999999999998e-5, 5.8199999999999998e-5, 5.8199999999999998e-5, 5.8199999999999998e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.2300000000000001e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.2300000000000001e-5, 1.04e-5, 6.2199999999999997e-6, 1.5099999999999999e-5, 1.2300000000000001e-5, 6.2199999999999997e-6, 6.2199999999999997e-6, 6.55e-6, 6.55e-6, 6.4200000000000002e-5, 6.4200000000000002e-5, 6.55e-6, 6.55e-6, 5.8199999999999998e-5, 5.8199999999999998e-5, 5.8199999999999998e-5, 5.8199999999999998e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.2300000000000001e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.2300000000000001e-5, 1.04e-5, 4.8099999999999997e-6, 1.5099999999999999e-5, 1.2300000000000001e-5, 4.8099999999999997e-6, 4.8099999999999997e-6, 6.55e-6, 6.55e-6, 6.4200000000000002e-5, 6.4200000000000002e-5, 6.55e-6, 6.55e-6, 5.8199999999999998e-5, 5.8199999999999998e-5, 5.8199999999999998e-5, 5.8199999999999998e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.2300000000000001e-5, 1.5099999999999999e-5, 1.2300000000000001e-5, 1.2300000000000001e-5, 1.04e-5, 8.9900000000000003e-6, 1.5099999999999999e-5, 1.2300000000000001e-5, 8.9900000000000003e-6, 8.9900000000000003e-6, 8.9900000000000003e-6, 8.9900000000000003e-6, 6.4200000000000002e-5, 6.4200000000000002e-5, 8.9900000000000003e-6, 8.9900000000000003e-6, 5.8199999999999998e-5, 5.8199999999999998e-5, 5.8199999999999998e-5, 5.8199999999999998e-5, 1.1199999999999999e-5, 1.1199999999999999e-5, 4.8099999999999997e-6, 4.8099999999999997e-6, 2.55e-5, 2.55e-5, 1.0000000000000001e-5, 1.0000000000000001e-5, 0.010800000000000001, 6.7800000000000003e-6, 6.8600000000000004e-6, 2.4899999999999999e-6, 9.6199999999999994e-6, 9.6199999999999994e-6, 9.6199999999999994e-6, 2.2199999999999999e-6, 2.2199999999999999e-6, 3.4300000000000002e-6, 3.4300000000000002e-6, 3.23e-6, 3.23e-6, 4.8099999999999997e-5, 4.8099999999999997e-5, 4.8099999999999997e-5, 1.34e-5, 1.34e-5, 0.081000000000000003, 4.8300000000000002e-5, 4.8300000000000002e-5, 5.75e-6, 5.75e-6, 5.75e-6, 7.0099999999999998e-6, 5.75e-6, 7.2400000000000001e-6, 5.75e-6, 5.8499999999999999e-6, 5.3499999999999996e-6, 5.3499999999999996e-6, 3.18e-6, 5.9299999999999998e-7, 9.6199999999999994e-6, 3.4300000000000002e-6, 3.4300000000000002e-6, 4.1499999999999999e-5, 8.3999999999999992e-6, 6.4099999999999996e-6, 3.0300000000000001e-5, 1.1199999999999999e-5, 9.6199999999999994e-6, 6.8600000000000004e-6, 6.8600000000000004e-6, 3.4300000000000002e-6, 9.6199999999999994e-6, 9.6199999999999994e-6, 3.4300000000000002e-6, 3.4300000000000002e-6, 3.4300000000000002e-6, 0.00025672100000000001, 0.00025672100000000001, 0.00025672100000000001, 0.00025672100000000001, 3.18e-6, 1.4500000000000001e-6, 7.0099999999999998e-6, 7.2400000000000001e-6, 5.8499999999999999e-6, 5.75e-6, 5.3499999999999996e-6, 8.3999999999999992e-6, 3.0300000000000001e-5, 2.55e-5, 5.75e-6, 2.55e-5, 0.00025672100000000001, 0.00025672100000000001, 0.00025672100000000001, 9.6199999999999994e-6, 9.6199999999999994e-6, 9.6199999999999994e-6, 9.6199999999999994e-6, 3.0300000000000001e-5, 9.6199999999999994e-6, 9.6199999999999994e-6, 9.6199999999999994e-6, 4.1500000000000001e-6, 2.2199999999999999e-6, 5.75e-6, 0.10000000000000001, 0.050000000000000003, 0.02, 0.02, 0.040000000000000001, 0.20000000000000001, 0.0050000000000000001, 0.00080000000000000004, 0.80000000000000004, 0.40000000000000002, 0.0050000000000000001, 0.5, 0.02, 0.10000000000000001, 0.001, 0.20000000000000001, 0.0030000000000000001, 0.001, 0.20000000000000001, 0.0030000000000000001, 0.001, 0.20000000000000001, 0.0030000000000000001, 1.9999999999999999e-7, 0.20000000000000001, 0.00050000000000000001, 0.02, 0.10000000000000001, 0.001, 0.20000000000000001, 0.0050000000000000001, 0.001, 0.20000000000000001, 0.0050000000000000001, 1.9999999999999999e-7, 0.20000000000000001, 0.050000000000000003, 0.02, 0.10000000000000001, 0.0080000000000000002, 80.0, 0.001, 0.20000000000000001, 0.0030000000000000001, 0.00050000000000000001, 0.001, 0.20000000000000001, 0.0080000000000000002, 0.80000000000000004, 0.001, 0.20000000000000001, 0.0030000000000000001, 0.00050000000000000001, 0.00050000000000000001, 0.0030000000000000001, 0.00050000000000000001, 0.02, 0.10000000000000001, 0.02, 0.10000000000000001, 0.02, 0.10000000000000001, 0.02, 0.02, 0.10000000000000001, 0.050000000000000003, 0.0, 100.0, 0.071223880000000003, 100.0, 0.071223880000000003, 100.0, 0.071223880000000003, 100.0, 0.071223880000000003, 100.0, 0.071223880000000003, 100.0, 0.071223880000000003, 100.0, 7000.0, 0.0, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 0.00064291819999999999, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 0.00025000000000000001, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 4.5993379999999999e-6, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 0.0079000000000000008, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 2.6000000000000001, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 9.7999999999999997e-5, 0.00031576759999999999, 0.0023993360000000002, 0.071223880000000003, 0.0003630037, 0.00081288479999999999, 0.00025094229999999998, 0.071223880000000003, 0.00073223820000000003, 2.8503460000000001e-6, 2.1658140000000001e-5, 0.00064291819999999999, 3.276734e-6, 7.3376860000000001e-6, 2.2651870000000002e-6, 0.00064291819999999999, 6.6097109999999997ee-5, 0.10000000000000001, 1.25, 3.0, 450.0, 3.0, 0.00015100000000000001, 0.10000000000000001, 1.25, 3.0, 450.0, 3.0, 0.012, 0.10000000000000001, 0.012, 0.10000000000000001, 0.0063800000000000003, 0.10000000000000001, 0.0048700000000000002, 0.10000000000000001, 0.0020699999999999998, 0.10000000000000001, 0.0048599999999999997, 0.10000000000000001, 0.012, 0.10000000000000001, 0.0083700000000000007, 0.10000000000000001, 0.0021099999999999999, 0.10000000000000001, 0.012, 0.10000000000000001, 0.002, 0.10000000000000001, 0.0081099999999999992, 0.10000000000000001, 0.0030599999999999998, 0.10000000000000001, 0.012699999999999999, 0.10000000000000001, 50.0, 4.0, 0.0052399999999999999, 0.10000000000000001, 0.00044900000000000002, 0.10000000000000001, 0.0011100000000000001, 0.10000000000000001, 0.0015900000000000001, 0.10000000000000001, 0.0, 0.0, 0.00033799999999999998, 0.10000000000000001, 0.0044000000000000003, 0.10000000000000001, 0.0029099999999999998, 0.10000000000000001, 0.0014300000000000001, 0.10000000000000001, 0.00089599999999999999, 0.10000000000000001, 0.011599999999999999, 0.10000000000000001, 0.0022000000000000001, 0.10000000000000001, 0.00381, 0.10000000000000001, 0.0033899999999999998, 0.10000000000000001, 0.0020100000000000001, 0.10000000000000001, 0.00060599999999999998, 0.10000000000000001, 0.0025300000000000001, 0.10000000000000001, 0.0, 0.0, 0.00057799999999999995, 0.10000000000000001, 0.0059300000000000004, 0.10000000000000001, 0.00031199999999999999, 0.10000000000000001, 0.0098600000000000007, 0.10000000000000001, 0.00060899999999999995, 0.10000000000000001, 0.00035399999999999999, 0.10000000000000001, 0.00035300000000000002, 0.10000000000000001, 0.0013500000000000001, 0.10000000000000001, 0.00044499999999999997, 0.10000000000000001, 1350.0, 4.0, 0.00182, 0.10000000000000001, 1350.0, 4.0, 0.0011999999999999999, 0.10000000000000001, 45.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.00096699999999999998, 0.10000000000000001, 60.0, 4.0, 0.00034900000000000003, 0.10000000000000001, 60.0, 4.0, 0.0018500000000000001, 0.10000000000000001, 60.0, 4.0, 0.0, 0.0, 60.0, 4.0, 0.0, 0.0, 0.0017899999999999999, 0.10000000000000001, 60.0, 4.0, 0.0, 0.0, 0.00023499999999999999, 0.10000000000000001, 60.0, 4.0, 0.00013999999999999999, 0.10000000000000001, 60.0, 4.0, 0.0, 0.0, 0.00314, 0.10000000000000001, 65.0, 4.0, 20.0, 4.0, 0.00069999999999999999, 0.10000000000000001, 0.00062699999999999995, 0.10000000000000001, 0.000101, 0.10000000000000001, 0.000101, 0.10000000000000001, 0.00067000000000000002, 0.10000000000000001, 0.00064599999999999998, 0.10000000000000001, 0.0, 0.0, 0.0, 0.0, 0.00082700000000000004, 0.10000000000000001, 0.000103, 0.10000000000000001, 0.0038600000000000001, 0.10000000000000001, 0.00020799999999999999, 0.10000000000000001, 0.00071000000000000002, 0.10000000000000001, 0.0, 0.0, 0.00040700000000000003, 0.10000000000000001, 0.0015, 0.10000000000000001, 0.0013799999999999999, 0.10000000000000001, 0.00015799999999999999, 0.10000000000000001, 0.00050900000000000001, 0.10000000000000001, 0.00080800000000000002, 0.10000000000000001, 0.000397, 0.10000000000000001, 0.00024000000000000001, 0.10000000000000001, 0.00028899999999999998, 0.10000000000000001, 0.0071199999999999996, 0.10000000000000001, 40.0, 4.0, 10.0, 4.0, 8.6799999999999996e-5, 0.10000000000000001, 0.00018100000000000001, 0.10000000000000001, 0.00051500000000000005, 0.10000000000000001, 9.2800000000000006e-5, 0.10000000000000001, 0.014500000000000001, 0.10000000000000001, 40.0, 4.0, 10.0, 4.0, 0.018700000000000001, 0.10000000000000001, 20.0, 4.0, 5.0, 4.0, 0.80000000000000004, 4.0, 0.022200000000000001, 0.10000000000000001, 0.80000000000000004, 3.0, 0.00172, 0.10000000000000001, 250.0, 4.0, 0.0032200000000000002, 0.10000000000000001, 0.0020600000000000002, 0.10000000000000001, 6.6199999999999996e-5, 0.10000000000000001, 0.000234, 0.10000000000000001, 0.00049899999999999999, 0.10000000000000001, 0.0013799999999999999, 0.10000000000000001, 6.7299999999999996e-5, 0.10000000000000001, 0.00046900000000000002, 0.10000000000000001, 0.00074600000000000003, 0.10000000000000001, 6.7000000000000002e-5, 0.10000000000000001, 0.00029399999999999999, 0.10000000000000001, 0.000147, 0.10000000000000001, 0.0, 0.0, 0.00044099999999999999, 0.10000000000000001, 0.0022699999999999999, 0.10000000000000001, 0.00064400000000000004, 0.10000000000000001, 0.000185, 0.10000000000000001, 0.0017799999999999999, 0.10000000000000001, 0.0042399999999999998, 0.10000000000000001, 7.6600000000000005e-5, 0.10000000000000001, 0.00033399999999999999, 0.10000000000000001, 0.000223, 0.10000000000000001, 0.0047000000000000002, 0.10000000000000001, 0.00042099999999999999, 0.10000000000000001, 0.0, 0.0, 0.0012600000000000001, 0.10000000000000001, 4.7200000000000002e-5, 0.10000000000000001, 60.0, 4.0, 0.00080599999999999997, 0.10000000000000001, 60.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0039300000000000003, 0.10000000000000001, 0.00097799999999999992, 0.10000000000000001, 0.00065200000000000002, 0.10000000000000001, 0.0, 0.0, 0.0, 0.0, 0.00099700000000000006, 0.10000000000000001, 60.0, 4.0, 0.00073999999999999999, 0.10000000000000001, 0.00029599999999999998, 0.10000000000000001, 0.00041300000000000001, 0.10000000000000001, 0.0016000000000000001, 0.10000000000000001, 60.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0023600000000000001, 0.10000000000000001, 0.0023600000000000001, 0.10000000000000001, 0.0017518690000000001, 0.10000000000000001, 8.0, 4.0, 0.5, 4.0, 0.0023600000000000001, 0.10000000000000001, 0.0023600000000000001, 0.10000000000000001, 0.0023600000000000001, 0.10000000000000001, 0.0, 0.10000000000000001, 400.0, 1.0, 0.0001595643, 0.10000000000000001, 0.5, 4.0, 0.5, 4.0, 0.0033732359999999999, 0.10000000000000001, 0.5, 4.0, 0.5, 4.0, 0.00081510000000000003, 0.10000000000000001, 8.0, 4.0, 0.5, 4.0, 0.5, 4.0, 0.5, 4.0, 3.5, 4.0, 0.5, 4.0, 0.00043106170000000002, 0.10000000000000001, 0.5, 4.0, 0.5, 4.0, 0.0012200170000000001, 0.10000000000000001, 0.5, 4.0, 0.5, 4.0, 0.0020377500000000001, 0.10000000000000001, 0.5, 4.0, 0.5, 4.0, 0.0036679500000000001, 0.10000000000000001, 2.0, 4.0, 0.5, 4.0, 0.5, 4.0, 0.5, 4.0, 0.5, 4.0, 3.5, 4.0, 0.5, 4.0, 0.0073825119999999999, 0.10000000000000001, 2.0, 4.0, 0.5, 4.0, 1.6500000000000001e-5, 6.02e-5, 8.6700000000000007e-5, 1.31e-5, 1.7600000000000001e-5, 3.01e-5, 4.8099999999999997e-5, 7.8899999999999993e-5, 7.9900000000000004e-5, 1.38e-5, 1.38e-5, 1.38e-5, 0.00012799999999999999, 0.00012799999999999999, 6.8300000000000007e-5, 5.1999999999999997e-5, 2.2099999999999998e-5, 7.7999999999999999e-5, 0.00012799999999999999, 8.9599999999999996e-5, 2.26e-5, 0.00012799999999999999, 2.1399999999999998e-5, 8.6700000000000007e-5, 3.2700000000000002e-5, 0.000193, 2.16e-5, 4.0800000000000002e-5, 1.84e-5, 4.1399999999999997e-5, 0.0, 6.1500000000000004e-5, 6.1500000000000004e-5, 5.2899999999999998e-5, 3.26e-5, 3.26e-5, 5.8699999999999997e-5, 3.0700000000000001e-5, 3.01e-5, 2.2799999999999999e-5, 7.3200000000000004e-5, 1.0499999999999999e-5, 3.0599999999999998e-5, 7.0300000000000001e-5, 3.4999999999999997e-5, 7.7000000000000001e-5, 1.8899999999999999e-5, 1.95e-5, 1.2300000000000001e-5, 3.2100000000000001e-5, 3.2100000000000001e-5, 1.8899999999999999e-5, 8.0900000000000001e-5, 8.2600000000000002e-5, 8.2600000000000002e-5, 1.9300000000000002e-5, 1.9300000000000002e-5, 2.3099999999999999e-5, 1.8199999999999999e-5, 2.0400000000000001e-5, 2.0400000000000001e-5, 2.3099999999999999e-5, 1.8600000000000001e-5, 1.9300000000000002e-5, 5.1999999999999997e-5, 5.1999999999999997e-5, 1.9300000000000002e-5, 0.00028699999999999998, 4.2400000000000001e-5, 2.2799999999999999e-5, 1.84e-5, 1.84e-5, 6.0900000000000003e-5, 5.8699999999999997e-5, 6.4200000000000002e-5, 4.3099999999999997e-5, 7.5199999999999998e-5, 1.88e-5, 7.7999999999999999e-5, 3.79e-5, 2.58e-5, 7.4099999999999999e-5, 7.4099999999999999e-5, 1.95e-5, 3.1399999999999998e-5, 9.55e-6, 2.3099999999999999e-5, 2.4499999999999999e-5, 7.2100000000000004e-5, 2.1800000000000001e-5, 1.7499999999999998e-5, 0.00133, 1.5800000000000001e-5, 1.6500000000000001e-5, 2.34e-5, 1.6900000000000001e-5, 0.00133, 0.00133, 0.00057799999999999995, 0.000241, 1.77e-5, 1.6200000000000001e-5, 1.2e-5, 1.42e-5, 3.0199999999999999e-5, 6.2700000000000006e-5, 1.22e-5, 2.8399999999999999e-5, 3.3899999999999997e-5, 1.22e-5, 2.6699999999999998e-5, 2.6699999999999998e-5, 2.6699999999999998e-5, 2.6699999999999998e-5, 1.1199999999999999e-5, 1.95e-5, 1.6799999999999998e-5, 8.0900000000000001e-5, 2.4899999999999999e-5, 1.3900000000000001e-5, 2.02e-5, 2.02e-5, 2.2500000000000001e-5, 2.55e-5, 1.7499999999999998e-5, 6.5500000000000006e-5, 1.7900000000000001e-5, 7.7999999999999999e-5, 1.9300000000000002e-5, 1.9300000000000002e-5, 1.88e-5, 5.9200000000000002e-5, 5.9200000000000002e-5, 1.9300000000000002e-5, 1.9300000000000002e-5, 6.3499999999999999e-5, 2.69e-5, 2.69e-5, 1.5e-5, 5.0000000000000002e-5, 1.9300000000000002e-5, 7.4099999999999999e-5, 7.4099999999999999e-5, 7.4099999999999999e-5, 1.098351e-5, 7.4099999999999999e-5, 7.4099999999999999e-5, 7.4099999999999999e-5, 0.0050000000000000001, 9.6705619999999996e-6, 1.005435e-5, 7.4099999999999999e-5, 2.6124950000000001e-5, 4.4364260000000002e-5, 7.4099999999999999e-5, 7.4099999999999999e-5, 8.8892370000000008e-6}, // fixedParameters
              std::vector<int>{},                          // plist
              std::vector<realtype>(1632, 0.0),   // idlist
              std::vector<int>{},                          // z2event
              true,                                        // pythonGenerated
              0,                       // ndxdotdp_explicit
              0,                       // ndxdotdx_explicit
              0                        // w_recursion_depth
          ) {}

    /**
     * @brief Clone this model instance.
     * @return A deep copy of this instance.
     */
    virtual amici::Model *clone() const override {
        return new Model_MEMMAL_v1(*this);
    }

    /** model specific implementation of fJrz
     * @param nllh regularization for event measurements z
     * @param iz event output index
     * @param p parameter vector
     * @param k constant vector
     * @param z model event output at timepoint
     * @param sigmaz event measurement standard deviation at timepoint
     **/
    virtual void fJrz(realtype *nllh, const int iz, const realtype *p,
                      const realtype *k, const realtype *rz,
                      const realtype *sigmaz) override {}

    /** model specific implementation of fJy
     * @param nllh negative log-likelihood for measurements y
     * @param iy output index
     * @param p parameter vector
     * @param k constant vector
     * @param y model output at timepoint
     * @param sigmay measurement standard deviation at timepoint
     * @param my measurements at timepoint
     **/
    virtual void fJy(realtype *nllh, const int iy, const realtype *p,
                     const realtype *k, const realtype *y,
                     const realtype *sigmay, const realtype *my) override {
        Jy_MEMMAL_v1(nllh, iy, p, k, y, sigmay, my);
    }

    /** model specific implementation of fJz
     * @param nllh negative log-likelihood for event measurements z
     * @param iz event output index
     * @param p parameter vector
     * @param k constant vector
     * @param z model event output at timepoint
     * @param sigmaz event measurement standard deviation at timepoint
     * @param mz event measurements at timepoint
     **/
    virtual void fJz(realtype *nllh, const int iz, const realtype *p,
                     const realtype *k, const realtype *z,
                     const realtype *sigmaz, const realtype *mz) override {}

    /** model specific implementation of fdJrzdsigma
     * @param dJrzdsigma Sensitivity of event penalization Jrz w.r.t.
     * standard deviation sigmaz
     * @param iz event output index
     * @param p parameter vector
     * @param k constant vector
     * @param rz model root output at timepoint
     * @param sigmaz event measurement standard deviation at timepoint
     **/
    virtual void fdJrzdsigma(realtype *dJrzdsigma, const int iz,
                             const realtype *p, const realtype *k,
                             const realtype *rz,
                             const realtype *sigmaz) override {}

    /** model specific implementation of fdJrzdz
     * @param dJrzdz partial derivative of event penalization Jrz
     * @param iz event output index
     * @param p parameter vector
     * @param k constant vector
     * @param rz model root output at timepoint
     * @param sigmaz event measurement standard deviation at timepoint
     **/
    virtual void fdJrzdz(realtype *dJrzdz, const int iz, const realtype *p,
                         const realtype *k, const realtype *rz,
                         const realtype *sigmaz) override {}

    /** model specific implementation of fdJydsigma
     * @param dJydsigma Sensitivity of time-resolved measurement
     * negative log-likelihood Jy w.r.t. standard deviation sigmay
     * @param iy output index
     * @param p parameter vector
     * @param k constant vector
     * @param y model output at timepoint
     * @param sigmay measurement standard deviation at timepoint
     * @param my measurement at timepoint
     **/
    virtual void fdJydsigma(realtype *dJydsigma, const int iy,
                            const realtype *p, const realtype *k,
                            const realtype *y, const realtype *sigmay,
                            const realtype *my) override {
        dJydsigmay_MEMMAL_v1(dJydsigma, iy, p, k, y, sigmay, my);
    }


    /** model specific implementation of fdJzdsigma
     * @param dJzdsigma Sensitivity of event measurement
     * negative log-likelihood Jz w.r.t. standard deviation sigmaz
     * @param iz event output index
     * @param p parameter vector
     * @param k constant vector
     * @param z model event output at timepoint
     * @param sigmaz event measurement standard deviation at timepoint
     * @param mz event measurement at timepoint
     **/
    virtual void fdJzdsigma(realtype *dJzdsigma, const int iz,
                            const realtype *p, const realtype *k,
                            const realtype *z, const realtype *sigmaz,
                            const realtype *mz) override {}

    /** model specific implementation of fdJzdz
     * @param dJzdz partial derivative of event measurement negative
     *log-likelihood Jz
     * @param iz event output index
     * @param p parameter vector
     * @param k constant vector
     * @param z model event output at timepoint
     * @param sigmaz event measurement standard deviation at timepoint
     * @param mz event measurement at timepoint
     **/
    virtual void fdJzdz(realtype *dJzdz, const int iz, const realtype *p,
                        const realtype *k, const realtype *z,
                        const realtype *sigmaz, const realtype *mz) override {}

    /** model specific implementation of fdeltasx
     * @param deltaqB sensitivity update
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heaviside vector
     * @param ip sensitivity index
     * @param ie event index
     * @param xdot new model right hand side
     * @param xdot_old previous model right hand side
     * @param xB adjoint state
     **/
    virtual void fdeltaqB(realtype *deltaqB, const realtype t,
                          const realtype *x, const realtype *p,
                          const realtype *k, const realtype *h, const int ip,
                          const int ie, const realtype *xdot,
                          const realtype *xdot_old,
                          const realtype *xB) override {}

    /** model specific implementation of fdeltasx
     * @param deltasx sensitivity update
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heaviside vector
     * @param w repeating elements vector
     * @param ip sensitivity index
     * @param ie event index
     * @param xdot new model right hand side
     * @param xdot_old previous model right hand side
     * @param sx state sensitivity
     * @param stau event-time sensitivity
     **/
    virtual void fdeltasx(realtype *deltasx, const realtype t,
                          const realtype *x, const realtype *p,
                          const realtype *k, const realtype *h,
                          const realtype *w, const int ip, const int ie,
                          const realtype *xdot, const realtype *xdot_old,
                          const realtype *sx, const realtype *stau) override {
        deltasx_MEMMAL_v1(deltasx, t, x, p, k, h, w, ip, ie, xdot,
                              xdot_old, sx, stau);
    }

    /** model specific implementation of fdeltax
     * @param deltax state update
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heaviside vector
     * @param ie event index
     * @param xdot new model right hand side
     * @param xdot_old previous model right hand side
     **/
    virtual void fdeltax(realtype *deltax, const realtype t, const realtype *x,
                         const realtype *p, const realtype *k,
                         const realtype *h, const int ie, const realtype *xdot,
                         const realtype *xdot_old) override {}

    /** model specific implementation of fdeltaxB
     * @param deltaxB adjoint state update
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heaviside vector
     * @param ie event index
     * @param xdot new model right hand side
     * @param xdot_old previous model right hand side
     * @param xB current adjoint state
     **/
    virtual void fdeltaxB(realtype *deltaxB, const realtype t,
                          const realtype *x, const realtype *p,
                          const realtype *k, const realtype *h, const int ie,
                          const realtype *xdot, const realtype *xdot_old,
                          const realtype *xB) override {}

    /** model specific implementation of fdrzdp
     * @param drzdp partial derivative of root output rz w.r.t. model parameters
     *p
     * @param ie event index
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heaviside vector
     * @param ip parameter index w.r.t. which the derivative is requested
     **/
    virtual void fdrzdp(realtype *drzdp, const int ie, const realtype t,
                        const realtype *x, const realtype *p, const realtype *k,
                        const realtype *h, const int ip) override {}

    /** model specific implementation of fdrzdx
     * @param drzdx partial derivative of root output rz w.r.t. model states x
     * @param ie event index
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heaviside vector
     **/
    virtual void fdrzdx(realtype *drzdx, const int ie, const realtype t,
                        const realtype *x, const realtype *p, const realtype *k,
                        const realtype *h) override {}

    /** model specific implementation of fsigmay
     * @param dsigmaydp partial derivative of standard deviation of measurements
     * @param t current time
     * @param p parameter vector
     * @param k constant vector
     * @param ip sensitivity index
     **/
    virtual void fdsigmaydp(realtype *dsigmaydp, const realtype t,
                            const realtype *p, const realtype *k,
                            const int ip) override {
        dsigmaydp_MEMMAL_v1(dsigmaydp, t, p, k, ip);
    }

    /** model specific implementation of fsigmaz
     * @param dsigmazdp partial derivative of standard deviation of event
     *measurements
     * @param t current time
     * @param p parameter vector
     * @param k constant vector
     * @param ip sensitivity index
     **/
    virtual void fdsigmazdp(realtype *dsigmazdp, const realtype t,
                            const realtype *p, const realtype *k,
                            const int ip) override {}

    virtual void fdJydy(realtype *dJydy, const int iy, const realtype *p, const realtype *k, const realtype *y, const realtype *sigmay, const realtype *my) override {
        dJydy_MEMMAL_v1( dJydy,  iy,  p,  k,  y,  sigmay,  my);
    }

    virtual void fdJydy_colptrs(SUNMatrixWrapper &colptrs, int index) override {
        dJydy_colptrs_MEMMAL_v1(colptrs, index);
    }

    virtual void fdJydy_rowvals(SUNMatrixWrapper &rowvals, int index) override {
        dJydy_rowvals_MEMMAL_v1(rowvals, index);
    }


    virtual void fdwdp(realtype *dwdp, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *w, const realtype *tcl, const realtype *dtcldp) override {
        dwdp_MEMMAL_v1( dwdp,  t,  x,  p,  k,  h,  w,  tcl,  dtcldp);
    }

    virtual void fdwdp_colptrs(SUNMatrixWrapper &colptrs) override {
        dwdp_colptrs_MEMMAL_v1(colptrs);
    }

    virtual void fdwdp_rowvals(SUNMatrixWrapper &rowvals) override {
        dwdp_rowvals_MEMMAL_v1(rowvals);
    }


    virtual void fdwdx(realtype *dwdx, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *w, const realtype *tcl) override {
        dwdx_MEMMAL_v1( dwdx,  t,  x,  p,  k,  h,  w,  tcl);
    }

    virtual void fdwdx_colptrs(SUNMatrixWrapper &colptrs) override {
        dwdx_colptrs_MEMMAL_v1(colptrs);
    }

    virtual void fdwdx_rowvals(SUNMatrixWrapper &rowvals) override {
        dwdx_rowvals_MEMMAL_v1(rowvals);
    }


    virtual void fdwdw(realtype *dwdw, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *w, const realtype *tcl) override {
        dwdw_MEMMAL_v1( dwdw,  t,  x,  p,  k,  h,  w,  tcl);
    }

    virtual void fdwdw_colptrs(SUNMatrixWrapper &colptrs) override {
        dwdw_colptrs_MEMMAL_v1(colptrs);
    }

    virtual void fdwdw_rowvals(SUNMatrixWrapper &rowvals) override {
        dwdw_rowvals_MEMMAL_v1(rowvals);
    }


    virtual void fdxdotdw(realtype *dxdotdw, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *w) override {
        dxdotdw_MEMMAL_v1( dxdotdw,  t,  x,  p,  k,  h,  w);
    }

    virtual void fdxdotdw_colptrs(SUNMatrixWrapper &colptrs) override {
        dxdotdw_colptrs_MEMMAL_v1(colptrs);
    }

    virtual void fdxdotdw_rowvals(SUNMatrixWrapper &rowvals) override {
        dxdotdw_rowvals_MEMMAL_v1(rowvals);
    }


    virtual void fdxdotdp_explicit(realtype *dxdotdp_explicit, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *w) override {
        dxdotdp_explicit_MEMMAL_v1( dxdotdp_explicit,  t,  x,  p,  k,  h,  w);
    }

    virtual void fdxdotdp_explicit_colptrs(SUNMatrixWrapper &colptrs) override {
        dxdotdp_explicit_colptrs_MEMMAL_v1(colptrs);
    }

    virtual void fdxdotdp_explicit_rowvals(SUNMatrixWrapper &rowvals) override {
        dxdotdp_explicit_rowvals_MEMMAL_v1(rowvals);
    }


    virtual void fdxdotdx_explicit(realtype *dxdotdx_explicit, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *w) override {
        dxdotdx_explicit_MEMMAL_v1( dxdotdx_explicit,  t,  x,  p,  k,  h,  w);
    }

    virtual void fdxdotdx_explicit_colptrs(SUNMatrixWrapper &colptrs) override {
        dxdotdx_explicit_colptrs_MEMMAL_v1(colptrs);
    }

    virtual void fdxdotdx_explicit_rowvals(SUNMatrixWrapper &rowvals) override {
        dxdotdx_explicit_rowvals_MEMMAL_v1(rowvals);
    }


    /** model specific implementation of fdydx
     * @param dydx partial derivative of observables y w.r.t. model states x
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heaviside vector
     **/
    virtual void fdydx(realtype *dydx, const realtype t, const realtype *x,
                       const realtype *p, const realtype *k, const realtype *h,
                       const realtype *w, const realtype *dwdx) override {
        dydx_MEMMAL_v1(dydx, t, x, p, k, h, w, dwdx);
    }

    /** model specific implementation of fdydp
     * @param dydp partial derivative of observables y w.r.t. model parameters p
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heaviside vector
     * @param ip parameter index w.r.t. which the derivative is requested
     **/
    virtual void fdydp(realtype *dydp, const realtype t, const realtype *x,
                       const realtype *p, const realtype *k, const realtype *h,
                       const int ip, const realtype *w,
                       const realtype *dwdp) override {
        dydp_MEMMAL_v1(dydp, t, x, p, k, h, ip, w, dwdp);
    }

    /** model specific implementation of fdzdp
     * @param dzdp partial derivative of event-resolved output z w.r.t. model
     *parameters p
     * @param ie event index
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heaviside vector
     * @param ip parameter index w.r.t. which the derivative is requested
     **/
    virtual void fdzdp(realtype *dzdp, const int ie, const realtype t,
                       const realtype *x, const realtype *p, const realtype *k,
                       const realtype *h, const int ip) override {}

    /** model specific implementation of fdzdx
     * @param dzdx partial derivative of event-resolved output z w.r.t. model
     *states x
     * @param ie event index
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heaviside vector
     **/
    virtual void fdzdx(realtype *dzdx, const int ie, const realtype t,
                       const realtype *x, const realtype *p, const realtype *k,
                       const realtype *h) override {}

    /** model specific implementation for froot
     * @param root values of the trigger function
     * @param t timepoint
     * @param x Vector with the states
     * @param p parameter vector
     * @param k constants vector
     * @param h heaviside vector
     **/
    virtual void froot(realtype *root, const realtype t, const realtype *x,
                       const realtype *p, const realtype *k,
                       const realtype *h) override {
        root_MEMMAL_v1(root, t, x, p, k, h);
    }

    /** model specific implementation of frz
     * @param rz value of root function at current timepoint (non-output events
     *not included)
     * @param ie event index
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heaviside vector
     **/
    virtual void frz(realtype *rz, const int ie, const realtype t,
                     const realtype *x, const realtype *p, const realtype *k,
                     const realtype *h) override {}

    /** model specific implementation of fsigmay
     * @param sigmay standard deviation of measurements
     * @param t current time
     * @param p parameter vector
     * @param k constant vector
     **/
    virtual void fsigmay(realtype *sigmay, const realtype t, const realtype *p,
                         const realtype *k) override {
        sigmay_MEMMAL_v1(sigmay, t, p, k);
    }

    /** model specific implementation of fsigmaz
     * @param sigmaz standard deviation of event measurements
     * @param t current time
     * @param p parameter vector
     * @param k constant vector
     **/
    virtual void fsigmaz(realtype *sigmaz, const realtype t, const realtype *p,
                         const realtype *k) override {}

    /** model specific implementation of fsrz
     * @param srz Sensitivity of rz, total derivative
     * @param ie event index
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param sx current state sensitivity
     * @param h heaviside vector
     * @param ip sensitivity index
     **/
    virtual void fsrz(realtype *srz, const int ie, const realtype t,
                      const realtype *x, const realtype *p, const realtype *k,
                      const realtype *h, const realtype *sx,
                      const int ip) override {}

    /** model specific implementation of fstau
     * @param stau total derivative of event timepoint
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heaviside vector
     * @param sx current state sensitivity
     * @param ip sensitivity index
     * @param ie event index
     **/
    virtual void fstau(realtype *stau, const realtype t, const realtype *x,
                       const realtype *p, const realtype *k, const realtype *h,
                       const realtype *sx, const int ip,
                       const int ie) override {
        stau_MEMMAL_v1(stau, t, x, p, k, h, sx, ip, ie);
    }

    /** model specific implementation of fsx0
     * @param sx0 initial state sensitivities
     * @param t initial time
     * @param x0 initial state
     * @param p parameter vector
     * @param k constant vector
     * @param ip sensitivity index
     **/
    virtual void fsx0(realtype *sx0, const realtype t, const realtype *x0,
                      const realtype *p, const realtype *k,
                      const int ip) override {
        sx0_MEMMAL_v1(sx0, t, x0, p, k, ip);
    }

    /** model specific implementation of fsx0_fixedParameters
     * @param sx0 initial state sensitivities
     * @param t initial time
     * @param x0 initial state
     * @param p parameter vector
     * @param k constant vector
     * @param ip sensitivity index
     **/
    virtual void fsx0_fixedParameters(realtype *sx0, const realtype t,
                                      const realtype *x0, const realtype *p,
                                      const realtype *k,
                                      const int ip) override {
        sx0_fixedParameters_MEMMAL_v1(sx0, t, x0, p, k, ip);
    }

    /** model specific implementation of fsz
     * @param sz Sensitivity of rz, total derivative
     * @param ie event index
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heaviside vector
     * @param sx current state sensitivity
     * @param ip sensitivity index
     **/
    virtual void fsz(realtype *sz, const int ie, const realtype t,
                     const realtype *x, const realtype *p, const realtype *k,
                     const realtype *h, const realtype *sx,
                     const int ip) override {}

    virtual void fw(realtype *w, const realtype t, const realtype *x, const realtype *p, const realtype *k, const realtype *h, const realtype *tcl) override {
        w_MEMMAL_v1( w,  t,  x,  p,  k,  h,  tcl);
    }


    /** model specific implementation of fx0
     * @param x0 initial state
     * @param t initial time
     * @param p parameter vector
     * @param k constant vector
     **/
    virtual void fx0(realtype *x0, const realtype t, const realtype *p,
                     const realtype *k) override {
        x0_MEMMAL_v1(x0, t, p, k);
    }

    /** model specific implementation of fx0_fixedParameters
     * @param x0 initial state
     * @param t initial time
     * @param p parameter vector
     * @param k constant vector
     **/
    virtual void fx0_fixedParameters(realtype *x0, const realtype t,
                                     const realtype *p,
                                     const realtype *k) override {
        x0_fixedParameters_MEMMAL_v1(x0, t, p, k);
    }

    /** model specific implementation for fxdot
     * @param xdot residual function
     * @param t timepoint
     * @param x Vector with the states
     * @param p parameter vector
     * @param k constants vector
     * @param h heaviside vector
     * @param w vector with helper variables
     **/
    virtual void fxdot(realtype *xdot, const realtype t, const realtype *x,
                       const realtype *p, const realtype *k, const realtype *h,
                       const realtype *w) override {
        xdot_MEMMAL_v1(xdot, t, x, p, k, h, w);
    }

    /** model specific implementation of fy
     * @param y model output at current timepoint
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heaviside vector
     **/
    virtual void fy(realtype *y, const realtype t, const realtype *x,
                    const realtype *p, const realtype *k, const realtype *h,
                    const realtype *w) override {
        y_MEMMAL_v1(y, t, x, p, k, h, w);
    }

    /** model specific implementation of fz
     * @param z value of event output
     * @param ie event index
     * @param t current time
     * @param x current state
     * @param p parameter vector
     * @param k constant vector
     * @param h heaviside vector
     **/
    virtual void fz(realtype *z, const int ie, const realtype t,
                    const realtype *x, const realtype *p, const realtype *k,
                    const realtype *h) override {}

    

    virtual void fx_solver(realtype *x_solver, const realtype *x_rdata) override {
        x_solver_MEMMAL_v1( x_solver,  x_rdata);
    }


    virtual void ftotal_cl(realtype *total_cl, const realtype *x_rdata) override {
        total_cl_MEMMAL_v1( total_cl,  x_rdata);
    }


    std::string getName() const override {
        return "MEMMAL_v1";
    }

    /**
     * @brief Get names of the model parameters
     * @return the names
     */
    virtual std::vector<std::string> getParameterNames() const override {
        return std::vector<std::string>(parameterNames.begin(),
                                        parameterNames.end());
    }

    /**
     * @brief Get names of the model states
     * @return the names
     */
    virtual std::vector<std::string> getStateNames() const override {
        return std::vector<std::string>(stateNames.begin(), stateNames.end());
    }

    /**
     * @brief Get names of the fixed model parameters
     * @return the names
     */
    virtual std::vector<std::string> getFixedParameterNames() const override {
        return std::vector<std::string>(fixedParameterNames.begin(),
                                        fixedParameterNames.end());
    }

    /**
     * @brief Get names of the observables
     * @return the names
     */
    virtual std::vector<std::string> getObservableNames() const override {
        return std::vector<std::string>(observableNames.begin(),
                                        observableNames.end());
    }

    /**
     * @brief Get names of model expressions
     * @return Expression names
     */
    virtual std::vector<std::string> getExpressionNames() const override {
        return std::vector<std::string>(expressionNames.begin(),
                                        expressionNames.end());
    }

    /**
     * @brief Get ids of the model parameters
     * @return the ids
     */
    virtual std::vector<std::string> getParameterIds() const override {
        return std::vector<std::string>(parameterIds.begin(),
                                        parameterIds.end());
    }

    /**
     * @brief Get ids of the model states
     * @return the ids
     */
    virtual std::vector<std::string> getStateIds() const override {
        return std::vector<std::string>(stateIds.begin(), stateIds.end());
    }

    /**
     * @brief Get ids of the fixed model parameters
     * @return the ids
     */
    virtual std::vector<std::string> getFixedParameterIds() const override {
        return std::vector<std::string>(fixedParameterIds.begin(),
                                        fixedParameterIds.end());
    }

    /**
     * @brief Get ids of the observables
     * @return the ids
     */
    virtual std::vector<std::string> getObservableIds() const override {
        return std::vector<std::string>(observableIds.begin(),
                                        observableIds.end());
    }

    /**
     * @brief Get IDs of model expressions
     * @return Expression IDs
     */
    virtual std::vector<std::string> getExpressionIds() const override {
        return std::vector<std::string>(expressionIds.begin(),
                                        expressionIds.end());
    }

    /**
     * @brief function indicating whether reinitialization of states depending on
     fixed parameters is permissible
     * @return flag indicating whether reinitialization of states depending on
     fixed parameters is permissible
     */
    virtual bool isFixedParameterStateReinitializationAllowed() const override {
        return true;
    }

    /**
     * @brief returns the amici version that was used to generate the model
     * @return ver amici version string
     */
    virtual const std::string getAmiciVersion() const override {
        return "0.11.12";
    }

    /**
     & @brief returns the amici version that was used to generate the model
     * @return commit amici git commit hash
     */
    virtual const std::string getAmiciCommit() const override {
        return "unknown";
    }

    virtual bool hasQuadraticLLH() const override {
        return true;
    }
};


} // namespace model_MEMMAL_v1

} // namespace amici

#endif /* _amici_TPL_MODELNAME_h */
